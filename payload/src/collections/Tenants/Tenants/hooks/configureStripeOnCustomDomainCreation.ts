import payload from "payload";
import { CollectionBeforeChangeHook } from "payload/types";

const isNewCustomDomainAdded = (data, originalDomains = []) => {
    return data.domains?.some(domain =>
        !domain.autoGenerated && !originalDomains?.some(od => od.domain === domain.domain)) || false;
};

const configureStripeOnCustomDomainCreation: CollectionBeforeChangeHook = async ({ data, originalDoc, operation, req }) => {
    if (operation === 'update' && data.emailConfig) {
        const emailConfig = data.emailConfig;

        if (emailConfig && data.domains) {
            const originalDomains = originalDoc.domains || [];
            const isDomainAdded = isNewCustomDomainAdded(data, originalDomains);

            if (isDomainAdded) {
                try {
                    const email = await payload.findByID({
                        collection: 'email-configs',
                        id: emailConfig
                    })

                    await payload.create({
                        collection: 'customers',
                        data: {
                            email: email.fromEmailAddress,
                            name: req.tenant.siteName,
                        }
                    })
                } catch (error) {
                    console.error('Error during domain addition and customer creation:', error);
                    throw error;
                }
            }
        }
    }
};

export default configureStripeOnCustomDomainCreation;
